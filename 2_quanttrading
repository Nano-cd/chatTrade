import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from torch.utils.data import Dataset, DataLoader

# 自定义数据集类
class FinancialDataset(Dataset):
    def __init__(self, X, y):
        self.X = torch.FloatTensor(X)
        self.y = torch.FloatTensor(y)
        
    def __len__(self):
        return len(self.X)
    
    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]

# 定义神经网络模型
class TradingModel(nn.Module):
    def __init__(self, input_size):
        super(TradingModel, self).__init__()
        self.lstm = nn.LSTM(input_size=input_size, hidden_size=64, num_layers=2, batch_first=True)
        self.fc = nn.Sequential(
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(32, 1),
            nn.Tanh()
        )
        
    def forward(self, x):
        lstm_out, _ = self.lstm(x)
        last_output = lstm_out[:, -1, :]
        return self.fc(last_output)

# 数据预处理函数
def prepare_data(data, lookback=30):
    """
    准备训练数据，使用过去lookback天的数据预测下一天的走势
    """
    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(data)
    
    X, y = [], []
    for i in range(len(scaled_data) - lookback):
        X.append(scaled_data[i:i+lookback])
        y.append(scaled_data[i+lookback, 0])  # 假设第一列是价格
    
    return np.array(X), np.array(y), scaler

# 训练函数
def train_model(model, train_loader, criterion, optimizer, epochs):
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for batch_X, batch_y in train_loader:
            optimizer.zero_grad()
            outputs = model(batch_X)
            loss = criterion(outputs.squeeze(), batch_y)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        
        if (epoch + 1) % 10 == 0:
            print(f'轮次 {epoch+1}/{epochs}, 损失: {total_loss/len(train_loader):.4f}')

# 测试函数
def test_model(model, test_loader):
    model.eval()
    predictions = []
    actuals = []
    
    with torch.no_grad():
        for batch_X, batch_y in test_loader:
            outputs = model(batch_X)
            predictions.extend(outputs.squeeze().tolist())
            actuals.extend(batch_y.tolist())
    
    return np.array(predictions), np.array(actuals)

# 主函数
def main():
    # 假设我们有以下输入特征：
    # - 开盘价、最高价、最低价、收盘价、成交量
    input_size = 5
    lookback = 30
    batch_size = 32
    epochs = 100
    
    # 加载数据（这里需要替换为实际的数据加载逻辑）
    # data = pd.read_csv('your_data.csv')
    # 示例数据
    data = np.random.randn(1000, input_size)
    
    # 准备数据
    X, y, scaler = prepare_data(data, lookback)
    
    # 分割训练集和测试集
    train_size = int(len(X) * 0.8)
    X_train, X_test = X[:train_size], X[train_size:]
    y_train, y_test = y[:train_size], y[train_size:]
    
    # 创建数据加载器
    train_dataset = FinancialDataset(X_train, y_train)
    test_dataset = FinancialDataset(X_test, y_test)
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=batch_size)
    
    # 初始化模型
    model = TradingModel(input_size)
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    
    # 训练模型
    train_model(model, train_loader, criterion, optimizer, epochs)
    
    # 测试模型
    predictions, actuals = test_model(model, test_loader)
    
    # 生成交易信号
    signals = np.sign(predictions)  # 1表示买入，-1表示卖出
    
    # 计算准确率
    accuracy = np.mean(np.sign(predictions) == np.sign(actuals))
    print(f'预测准确率: {accuracy:.2f}')

if __name__ == "__main__":
    main()
